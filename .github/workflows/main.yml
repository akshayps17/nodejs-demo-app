name: CI/CD - Docker build, test & push (test branch)

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/node-login-module
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image (load to runner)
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false            # do not push yet
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          load: true             # load image into the runner so we can run tests

      - name: Run container (background) for tests
        id: run-container
        run: |
          CONTAINER_ID=$(docker run -d -p 3000:3000 --env NODE_ENV=test ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }})
          echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_OUTPUT
          # wait for server to boot
          ATTEMPTS=0
          until docker exec $CONTAINER_ID sh -c "wget -qO- --timeout=1 http://127.0.0.1:3000/ >/dev/null" || [ $ATTEMPTS -ge 12 ]; do
            echo "Waiting for app to start..."
            sleep 2
            ATTEMPTS=$((ATTEMPTS+1))
          done
          docker ps -f id=$CONTAINER_ID --format "table {{.ID}}\t{{.Status}}"

      - name: Run smoke-check and npm tests inside container
        run: |
          CONTAINER_ID=${{ steps.run-container.outputs.CONTAINER_ID }}
          echo "Running health-check..."
          docker exec $CONTAINER_ID sh -c "node -v && npm -v"
          # A simple HTTP health-check (change path if your app uses /api or /)
          docker exec $CONTAINER_ID sh -c "wget -qO- --timeout=3 http://127.0.0.1:3000/ || (echo 'Health check failed' && exit 1)"

          # If you have tests defined in package.json, run them here:
          echo "Running npm test inside container..."
          docker exec $CONTAINER_ID sh -c "npm test" 

      - name: Stop and remove test container
        if: always()
        run: |
          CONTAINER_ID=${{ steps.run-container.outputs.CONTAINER_ID }}
          if [ -n "$CONTAINER_ID" ]; then
            docker rm -f $CONTAINER_ID || true
          fi

      # Only push when tests passed (previous step would have failed otherwise)
      - name: Push Docker image to Docker Hub
        if: success()
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
